@using System.Text.Json;
@model IEnumerable<ShopLite.Models.Product>

@{
	ViewData["Title"] = "Home Page";
	var categories = ViewData["Categories"];

	
	var filterMinPrice = ViewData["FilterMinPrice"];
	var filterMaxPrice = ViewData["FilterMaxPrice"];
}

<!-- SIDEBAR / FILTERS -->
<aside class="col-lg-3">
	<div class="card p-3 filters-sticky">
		<h5 class="mb-2">Filters</h5>

		<div class="mb-3">
			<label class="form-label small">Category</label>
			<select name="category" form="searchFilterForm" id="filter-category" class="form-select form-select-sm" asp-items="@ViewBag.Categories">
				<option value="All">All</option>
			</select>
		</div>

		<div class="mb-3">
			<label class="form-label small">Price</label>
			<div class="d-flex gap-2">
				<input name="minPrice" form="searchFilterForm" id="price-min" type="number" class="form-control form-control-sm" placeholder="min" min="0" value="@(filterMinPrice == null ? "" : filterMinPrice )">
				<input name="maxPrice" form="searchFilterForm" id="price-max" type="number" class="form-control form-control-sm" placeholder="max" min="0" value="@(filterMaxPrice == null ? "" : filterMaxPrice )">
			</div>
		</div>

		<div class="mb-0">
			<button form="searchFilterForm" type="submit" asp-controller="Home" asp-action="Index" class="btn btn-sm btn-outline-primary w-100 mb-1">Filter</button>
			<a asp-controller="Home" asp-action="Index" class="btn btn-sm btn-outline-secondary w-100">Clear filters</a>
		</div>


	</div>
</aside>

<!-- PRODUCTS -->
<section id="products" class="col-lg-9">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<div>
			<small class="text-muted">Showing <span id="results-count">@Model.ToList().Count @(ViewBag.TotalPages > 1 ? "out of " + ViewBag.TotalProductsCount : "")</span> products</small>
		</div>
		<div class="d-flex gap-2 align-items-center">
			<label class="small mb-0 me-2">Sort:</label>
			<select id="sort-select" class="form-select form-select-sm" style="width:170px" onchange="applySorting()">
				<option value='default'>Default</option>
				<option value="priceUp">Price ↑</option>
				<option value="priceDown">Price ↓</option>
				<option value="nameAZ">Name A–Z</option>
			</select>
		</div>
	</div>

	<!-- GRID -->
	<div id="product-grid" class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
		
		<!-- JS INSERTS PRODUCTS HERE -->

	</div>
</section>

<!-- Pagination -->
<div class="card-footer bg-white">
	<nav aria-label="Pages">
		<ul class="pagination justify-content-end mb-0">
			<li class="page-item @(ViewBag.PageNumber <= 1 ? "disabled" : "")">
				<a class="page-link" href="@Url.Action("Index", new { page = ViewBag.PageNumber - 1, category = ViewBag.SelectedCategory, search = ViewBag.SearchTerm, minPrice = ViewBag.FilterMinPrice, maxPrice = ViewBag.FilterMaxPrice })" aria-label="Previous">
					<span aria-hidden="true">&laquo;</span>
				</a>
			</li>

			@for (int p = 1; p <= (ViewBag.TotalPages ?? 1); p++)
			{
				<li class="page-item @(p == (ViewBag.PageNumber ?? 1) ? "active" : "")">
					<a class="page-link" href="@Url.Action("Index", new { page = p, category = ViewBag.SelectedCategory, search = ViewBag.SearchTerm, minPrice = ViewBag.FilterMinPrice, maxPrice = ViewBag.FilterMaxPrice })">@p</a>
				</li>
			}

			<li class="page-item @(ViewBag.PageNumber >= (ViewBag.TotalPages ?? 1) ? "disabled" : "")">
				<a class="page-link" href="@Url.Action("Index", new { page = ViewBag.PageNumber + 1, category = ViewBag.SelectedCategory, search = ViewBag.SearchTerm, minPrice = ViewBag.FilterMinPrice, maxPrice = ViewBag.FilterMaxPrice })" aria-label="Next">
					<span aria-hidden="true">&raquo;</span>
				</a>
			</li>
		</ul>
	</nav>
</div>

@section Scripts {
	<script>
		const products = @Html.Raw(Json.Serialize(Model));

		const productDetailsBaseUrl = '@Url.Action("Details", "Products")';
		const addToCartBaseUrl = '@Url.Action("AddToCart", "Cart")';

		const userLocale = navigator.language || 'en-US';
		const userCurrency = userLocale.startsWith('pl') ? 'PLN'
							: userLocale.startsWith('de') ? 'EUR'
							: userLocale.startsWith('en') ? 'USD'
							: 'EUR'; // fallback

		function formatPrice(price) {
			return new Intl.NumberFormat(userLocale, { style: 'currency', currency: userCurrency }).format(price);
		}

		function applySorting() {
			const sel = document.getElementById("sort-select").value;
			var sorted;

			switch (sel) {
				case "default":
					sorted = @Html.Raw(Json.Serialize(Model));
					break;
				case "priceUp":
					sorted = products.sort((a,b) => a.price - b.price);
					break;
				case "priceDown":
					sorted = products.sort((a,b) => b.price - a.price);
					break;
				case "nameAZ":
					sorted = products.sort((a,b) => a.name.localeCompare(b.name));
					break;
			}
			renderProducts(sorted);
		}

		function renderProducts(list) {
			const container = document.getElementById("product-grid");
			container.innerHTML = "";

			list.forEach(p => {
				container.innerHTML += `
					<div class="col">
						<div class="card product-card h-100">
							<div class="product-img-wrap">
								<img src="${p.imageUrl}" alt="${p.name}" class="img-fluid" style="max-height:150px;">
							</div>
							<div class="card-body d-flex flex-column">
								<div class="d-flex justify-content-between align-items-start mb-2">
									<h6 class="card-title mb-0">${p.name}</h6>
								</div>
								<p class="card-text mb-2 truncate-2 text-muted">${p.description}</p>

								<div class="mt-auto d-flex justify-content-between align-items-center">
									<div>
										<div class="price-now">${formatPrice(p.price)}</div>
									</div>
									<div class="d-flex gap-2">
										<a href="${productDetailsBaseUrl}?id=${p.id}" class="btn btn-outline-secondary btn-sm">Details</a>
										<a href="${addToCartBaseUrl}?id=${p.id}" class="btn btn-primary btn-sm"><i class="bi bi-cart-plus"></i></a>
									</div>
								</div>
							</div>
						</div>
					</div>`;
			});
		}

		renderProducts(products);
	</script>
}